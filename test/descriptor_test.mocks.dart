// Mocks generated by Mockito 5.0.3 from annotations
// in flutter_ble_lib/test/descriptor_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:typed_data' as _i2;

import 'package:flutter_ble_lib/flutter_ble_lib.dart' as _i3;
import 'package:flutter_ble_lib/src/_managers_for_classes.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeUint8List extends _i1.Fake implements _i2.Uint8List {}

class _FakeService extends _i1.Fake implements _i3.Service {}

class _FakeDescriptorWithValue extends _i1.Fake
    implements _i3.DescriptorWithValue {}

class _FakeDescriptor extends _i1.Fake implements _i3.Descriptor {}

/// A class which mocks [ManagerForDescriptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockManagerForDescriptor extends _i1.Mock
    implements _i4.ManagerForDescriptor {
  MockManagerForDescriptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i5.Future<_i2.Uint8List> readDescriptorForIdentifier(
          _i3.Descriptor? descriptor, String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readDescriptorForIdentifier, [descriptor, transactionId]),
              returnValue: Future.value(_FakeUint8List()))
          as _i5.Future<_i2.Uint8List>);
  @override
  _i5.Future<void> writeDescriptorForIdentifier(_i3.Descriptor? descriptor,
          _i2.Uint8List? value, String? transactionId) =>
      (super.noSuchMethod(
          Invocation.method(#writeDescriptorForIdentifier,
              [descriptor, value, transactionId]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
}

/// A class which mocks [Characteristic].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacteristic extends _i1.Mock implements _i3.Characteristic {
  MockCharacteristic() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Service get service => (super.noSuchMethod(Invocation.getter(#service),
      returnValue: _FakeService()) as _i3.Service);
  @override
  set service(_i3.Service? _service) =>
      super.noSuchMethod(Invocation.setter(#service, _service),
          returnValueForMissingStub: null);
  @override
  String get uuid =>
      (super.noSuchMethod(Invocation.getter(#uuid), returnValue: '') as String);
  @override
  set uuid(String? _uuid) => super.noSuchMethod(Invocation.setter(#uuid, _uuid),
      returnValueForMissingStub: null);
  @override
  bool get isReadable =>
      (super.noSuchMethod(Invocation.getter(#isReadable), returnValue: false)
          as bool);
  @override
  set isReadable(bool? _isReadable) =>
      super.noSuchMethod(Invocation.setter(#isReadable, _isReadable),
          returnValueForMissingStub: null);
  @override
  bool get isWritableWithResponse =>
      (super.noSuchMethod(Invocation.getter(#isWritableWithResponse),
          returnValue: false) as bool);
  @override
  set isWritableWithResponse(bool? _isWritableWithResponse) =>
      super.noSuchMethod(
          Invocation.setter(#isWritableWithResponse, _isWritableWithResponse),
          returnValueForMissingStub: null);
  @override
  bool get isWritableWithoutResponse =>
      (super.noSuchMethod(Invocation.getter(#isWritableWithoutResponse),
          returnValue: false) as bool);
  @override
  set isWritableWithoutResponse(bool? _isWritableWithoutResponse) =>
      super.noSuchMethod(
          Invocation.setter(
              #isWritableWithoutResponse, _isWritableWithoutResponse),
          returnValueForMissingStub: null);
  @override
  bool get isNotifiable =>
      (super.noSuchMethod(Invocation.getter(#isNotifiable), returnValue: false)
          as bool);
  @override
  set isNotifiable(bool? _isNotifiable) =>
      super.noSuchMethod(Invocation.setter(#isNotifiable, _isNotifiable),
          returnValueForMissingStub: null);
  @override
  bool get isIndicatable =>
      (super.noSuchMethod(Invocation.getter(#isIndicatable), returnValue: false)
          as bool);
  @override
  set isIndicatable(bool? _isIndicatable) =>
      super.noSuchMethod(Invocation.setter(#isIndicatable, _isIndicatable),
          returnValueForMissingStub: null);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  _i5.Future<_i2.Uint8List> read({String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#read, [], {#transactionId: transactionId}),
              returnValue: Future.value(_FakeUint8List()))
          as _i5.Future<_i2.Uint8List>);
  @override
  _i5.Future<void> write(_i2.Uint8List? value, bool? withResponse,
          {String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #write, [value, withResponse], {#transactionId: transactionId}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i5.Future<void>);
  @override
  _i5.Stream<_i2.Uint8List> monitor({String? transactionId}) => (super
          .noSuchMethod(
              Invocation.method(#monitor, [], {#transactionId: transactionId}),
              returnValue: Stream<_i2.Uint8List>.empty())
      as _i5.Stream<_i2.Uint8List>);
  @override
  _i5.Future<List<_i3.Descriptor>> descriptors() =>
      (super.noSuchMethod(Invocation.method(#descriptors, []),
              returnValue: Future.value(<_i3.Descriptor>[]))
          as _i5.Future<List<_i3.Descriptor>>);
  @override
  _i5.Future<_i3.DescriptorWithValue> readDescriptor(String? descriptorUuid,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#readDescriptor, [descriptorUuid],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptorWithValue()))
          as _i5.Future<_i3.DescriptorWithValue>);
  @override
  _i5.Future<_i3.Descriptor> writeDescriptor(
          String? descriptorUuid, _i2.Uint8List? value,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#writeDescriptor, [descriptorUuid, value],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptor()))
          as _i5.Future<_i3.Descriptor>);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}
