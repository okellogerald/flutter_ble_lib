// Mocks generated by Mockito 5.0.3 from annotations
// in flutter_ble_lib/test/service_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i4;
import 'dart:typed_data' as _i3;

import 'package:flutter_ble_lib/flutter_ble_lib.dart' as _i2;
import 'package:flutter_ble_lib/src/_internal.dart' as _i6;
import 'package:flutter_ble_lib/src/_managers_for_classes.dart' as _i5;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: comment_references
// ignore_for_file: unnecessary_parenthesis

class _FakeCharacteristicWithValue extends _i1.Fake
    implements _i2.CharacteristicWithValue {}

class _FakeCharacteristic extends _i1.Fake implements _i2.Characteristic {}

class _FakeDescriptorWithValue extends _i1.Fake
    implements _i2.DescriptorWithValue {}

class _FakeDescriptor extends _i1.Fake implements _i2.Descriptor {}

class _FakeUint8List extends _i1.Fake implements _i3.Uint8List {}

class _FakeService extends _i1.Fake implements _i2.Service {}

/// A class which mocks [Peripheral].
///
/// See the documentation for Mockito's code generation for more information.
class MockPeripheral extends _i1.Mock implements _i2.Peripheral {
  MockPeripheral() {
    _i1.throwOnMissingStub(this);
  }

  @override
  String get identifier =>
      (super.noSuchMethod(Invocation.getter(#identifier), returnValue: '')
          as String);
  @override
  set identifier(String? _identifier) =>
      super.noSuchMethod(Invocation.setter(#identifier, _identifier),
          returnValueForMissingStub: null);
  @override
  _i4.Future<void> connect(
          {bool? isAutoConnect = false,
          int? requestMtu = 0,
          bool? refreshGatt = false,
          Duration? timeout}) =>
      (super.noSuchMethod(
          Invocation.method(#connect, [], {
            #isAutoConnect: isAutoConnect,
            #requestMtu: requestMtu,
            #refreshGatt: refreshGatt,
            #timeout: timeout
          }),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Stream<_i2.PeripheralConnectionState> observeConnectionState(
          {bool? emitCurrentValue = false,
          bool? completeOnDisconnect = false}) =>
      (super.noSuchMethod(
              Invocation.method(#observeConnectionState, [], {
                #emitCurrentValue: emitCurrentValue,
                #completeOnDisconnect: completeOnDisconnect
              }),
              returnValue: Stream<_i2.PeripheralConnectionState>.empty())
          as _i4.Stream<_i2.PeripheralConnectionState>);
  @override
  _i4.Future<bool> isConnected() =>
      (super.noSuchMethod(Invocation.method(#isConnected, []),
          returnValue: Future.value(false)) as _i4.Future<bool>);
  @override
  _i4.Future<void> disconnectOrCancelConnection() =>
      (super.noSuchMethod(Invocation.method(#disconnectOrCancelConnection, []),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<void> discoverAllServicesAndCharacteristics(
          {String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(#discoverAllServicesAndCharacteristics, [],
              {#transactionId: transactionId}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Future<List<_i2.Service>> services() =>
      (super.noSuchMethod(Invocation.method(#services, []),
              returnValue: Future.value(<_i2.Service>[]))
          as _i4.Future<List<_i2.Service>>);
  @override
  _i4.Future<List<_i2.Characteristic>> characteristics(String? servicedUuid) =>
      (super.noSuchMethod(Invocation.method(#characteristics, [servicedUuid]),
              returnValue: Future.value(<_i2.Characteristic>[]))
          as _i4.Future<List<_i2.Characteristic>>);
  @override
  _i4.Future<int> rssi({String? transactionId}) => (super.noSuchMethod(
      Invocation.method(#rssi, [], {#transactionId: transactionId}),
      returnValue: Future.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<int> requestMtu(int? mtu, {String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #requestMtu, [mtu], {#transactionId: transactionId}),
          returnValue: Future.value(0)) as _i4.Future<int>);
  @override
  _i4.Future<_i2.CharacteristicWithValue> readCharacteristic(
          String? serviceUuid, String? characteristicUuid,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readCharacteristic,
                  [serviceUuid, characteristicUuid],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeCharacteristicWithValue()))
          as _i4.Future<_i2.CharacteristicWithValue>);
  @override
  _i4.Future<_i2.Characteristic> writeCharacteristic(String? serviceUuid,
          String? characteristicUuid, _i3.Uint8List? value, bool? withResponse,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeCharacteristic,
                  [serviceUuid, characteristicUuid, value, withResponse],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeCharacteristic()))
          as _i4.Future<_i2.Characteristic>);
  @override
  _i4.Future<List<_i2.Descriptor>> descriptorsForCharacteristic(
          String? serviceUuid, String? characteristicUuid) =>
      (super.noSuchMethod(
              Invocation.method(#descriptorsForCharacteristic,
                  [serviceUuid, characteristicUuid]),
              returnValue: Future.value(<_i2.Descriptor>[]))
          as _i4.Future<List<_i2.Descriptor>>);
  @override
  _i4.Future<_i2.DescriptorWithValue> readDescriptor(String? serviceUuid,
          String? characteristicUuid, String? descriptorUuid,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readDescriptor,
                  [serviceUuid, characteristicUuid, descriptorUuid],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptorWithValue()))
          as _i4.Future<_i2.DescriptorWithValue>);
  @override
  _i4.Future<_i2.Descriptor> writeDescriptor(
          String? serviceUuid,
          String? characteristicUuid,
          String? descriptorUuid,
          _i3.Uint8List? value,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #writeDescriptor,
                  [serviceUuid, characteristicUuid, descriptorUuid, value],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptor()))
          as _i4.Future<_i2.Descriptor>);
  @override
  _i4.Stream<_i2.CharacteristicWithValue> monitorCharacteristic(
          String? serviceUuid, String? characteristicUuid,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(
                  #monitorCharacteristic,
                  [serviceUuid, characteristicUuid],
                  {#transactionId: transactionId}),
              returnValue: Stream<_i2.CharacteristicWithValue>.empty())
          as _i4.Stream<_i2.CharacteristicWithValue>);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
}

/// A class which mocks [ManagerForService].
///
/// See the documentation for Mockito's code generation for more information.
class MockManagerForService extends _i1.Mock implements _i5.ManagerForService {
  MockManagerForService() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<List<_i2.Characteristic>> characteristicsForService(
          _i2.Service? service) =>
      (super.noSuchMethod(
              Invocation.method(#characteristicsForService, [service]),
              returnValue: Future.value(<_i2.Characteristic>[]))
          as _i4.Future<List<_i2.Characteristic>>);
  @override
  _i4.Future<_i2.CharacteristicWithValue> readCharacteristicForService(
          _i2.Peripheral? peripheral,
          _i6.InternalService? service,
          String? characteristicUuid,
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#readCharacteristicForService,
                  [peripheral, service, characteristicUuid, transactionId]),
              returnValue: Future.value(_FakeCharacteristicWithValue()))
          as _i4.Future<_i2.CharacteristicWithValue>);
  @override
  _i4.Future<_i2.Characteristic> writeCharacteristicForService(
          _i2.Peripheral? peripheral,
          _i6.InternalService? service,
          String? characteristicUuid,
          _i3.Uint8List? value,
          bool? withResponse,
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#writeCharacteristicForService, [
                peripheral,
                service,
                characteristicUuid,
                value,
                withResponse,
                transactionId
              ]),
              returnValue: Future.value(_FakeCharacteristic()))
          as _i4.Future<_i2.Characteristic>);
  @override
  _i4.Stream<_i2.CharacteristicWithValue> monitorCharacteristicForService(
          _i2.Peripheral? peripheral,
          _i6.InternalService? service,
          String? characteristicUuid,
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#monitorCharacteristicForService,
                  [peripheral, service, characteristicUuid, transactionId]),
              returnValue: Stream<_i2.CharacteristicWithValue>.empty())
          as _i4.Stream<_i2.CharacteristicWithValue>);
  @override
  _i4.Future<List<_i2.Descriptor>> descriptorsForService(
          _i2.Service? service, String? characteristicUuid) =>
      (super.noSuchMethod(
              Invocation.method(
                  #descriptorsForService, [service, characteristicUuid]),
              returnValue: Future.value(<_i2.Descriptor>[]))
          as _i4.Future<List<_i2.Descriptor>>);
  @override
  _i4.Future<_i2.DescriptorWithValue> readDescriptorForService(
          _i2.Service? service,
          String? characteristicUuid,
          String? descriptorUuid,
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#readDescriptorForService,
                  [service, characteristicUuid, descriptorUuid, transactionId]),
              returnValue: Future.value(_FakeDescriptorWithValue()))
          as _i4.Future<_i2.DescriptorWithValue>);
  @override
  _i4.Future<_i2.Descriptor> writeDescriptorForService(
          _i2.Service? service,
          String? characteristicUuid,
          String? descriptorUuid,
          _i3.Uint8List? value,
          String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(#writeDescriptorForService, [
                service,
                characteristicUuid,
                descriptorUuid,
                value,
                transactionId
              ]),
              returnValue: Future.value(_FakeDescriptor()))
          as _i4.Future<_i2.Descriptor>);
}

/// A class which mocks [ManagerForDescriptor].
///
/// See the documentation for Mockito's code generation for more information.
class MockManagerForDescriptor extends _i1.Mock
    implements _i5.ManagerForDescriptor {
  MockManagerForDescriptor() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.Future<_i3.Uint8List> readDescriptorForIdentifier(
          _i2.Descriptor? descriptor, String? transactionId) =>
      (super.noSuchMethod(
              Invocation.method(
                  #readDescriptorForIdentifier, [descriptor, transactionId]),
              returnValue: Future.value(_FakeUint8List()))
          as _i4.Future<_i3.Uint8List>);
  @override
  _i4.Future<void> writeDescriptorForIdentifier(_i2.Descriptor? descriptor,
          _i3.Uint8List? value, String? transactionId) =>
      (super.noSuchMethod(
          Invocation.method(#writeDescriptorForIdentifier,
              [descriptor, value, transactionId]),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
}

/// A class which mocks [CharacteristicWithValue].
///
/// See the documentation for Mockito's code generation for more information.
class MockCharacteristicWithValue extends _i1.Mock
    implements _i2.CharacteristicWithValue {
  MockCharacteristicWithValue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Uint8List get value => (super.noSuchMethod(Invocation.getter(#value),
      returnValue: _FakeUint8List()) as _i3.Uint8List);
  @override
  set value(_i3.Uint8List? _value) =>
      super.noSuchMethod(Invocation.setter(#value, _value),
          returnValueForMissingStub: null);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  _i2.Service get service => (super.noSuchMethod(Invocation.getter(#service),
      returnValue: _FakeService()) as _i2.Service);
  @override
  set service(_i2.Service? _service) =>
      super.noSuchMethod(Invocation.setter(#service, _service),
          returnValueForMissingStub: null);
  @override
  String get uuid =>
      (super.noSuchMethod(Invocation.getter(#uuid), returnValue: '') as String);
  @override
  set uuid(String? _uuid) => super.noSuchMethod(Invocation.setter(#uuid, _uuid),
      returnValueForMissingStub: null);
  @override
  bool get isReadable =>
      (super.noSuchMethod(Invocation.getter(#isReadable), returnValue: false)
          as bool);
  @override
  set isReadable(bool? _isReadable) =>
      super.noSuchMethod(Invocation.setter(#isReadable, _isReadable),
          returnValueForMissingStub: null);
  @override
  bool get isWritableWithResponse =>
      (super.noSuchMethod(Invocation.getter(#isWritableWithResponse),
          returnValue: false) as bool);
  @override
  set isWritableWithResponse(bool? _isWritableWithResponse) =>
      super.noSuchMethod(
          Invocation.setter(#isWritableWithResponse, _isWritableWithResponse),
          returnValueForMissingStub: null);
  @override
  bool get isWritableWithoutResponse =>
      (super.noSuchMethod(Invocation.getter(#isWritableWithoutResponse),
          returnValue: false) as bool);
  @override
  set isWritableWithoutResponse(bool? _isWritableWithoutResponse) =>
      super.noSuchMethod(
          Invocation.setter(
              #isWritableWithoutResponse, _isWritableWithoutResponse),
          returnValueForMissingStub: null);
  @override
  bool get isNotifiable =>
      (super.noSuchMethod(Invocation.getter(#isNotifiable), returnValue: false)
          as bool);
  @override
  set isNotifiable(bool? _isNotifiable) =>
      super.noSuchMethod(Invocation.setter(#isNotifiable, _isNotifiable),
          returnValueForMissingStub: null);
  @override
  bool get isIndicatable =>
      (super.noSuchMethod(Invocation.getter(#isIndicatable), returnValue: false)
          as bool);
  @override
  set isIndicatable(bool? _isIndicatable) =>
      super.noSuchMethod(Invocation.setter(#isIndicatable, _isIndicatable),
          returnValueForMissingStub: null);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
  @override
  String toString() =>
      (super.noSuchMethod(Invocation.method(#toString, []), returnValue: '')
          as String);
  @override
  _i4.Future<_i3.Uint8List> read({String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#read, [], {#transactionId: transactionId}),
              returnValue: Future.value(_FakeUint8List()))
          as _i4.Future<_i3.Uint8List>);
  @override
  _i4.Future<void> write(_i3.Uint8List? value, bool? withResponse,
          {String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(
              #write, [value, withResponse], {#transactionId: transactionId}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  _i4.Stream<_i3.Uint8List> monitor({String? transactionId}) => (super
          .noSuchMethod(
              Invocation.method(#monitor, [], {#transactionId: transactionId}),
              returnValue: Stream<_i3.Uint8List>.empty())
      as _i4.Stream<_i3.Uint8List>);
  @override
  _i4.Future<List<_i2.Descriptor>> descriptors() =>
      (super.noSuchMethod(Invocation.method(#descriptors, []),
              returnValue: Future.value(<_i2.Descriptor>[]))
          as _i4.Future<List<_i2.Descriptor>>);
  @override
  _i4.Future<_i2.DescriptorWithValue> readDescriptor(String? descriptorUuid,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#readDescriptor, [descriptorUuid],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptorWithValue()))
          as _i4.Future<_i2.DescriptorWithValue>);
  @override
  _i4.Future<_i2.Descriptor> writeDescriptor(
          String? descriptorUuid, _i3.Uint8List? value,
          {String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#writeDescriptor, [descriptorUuid, value],
                  {#transactionId: transactionId}),
              returnValue: Future.value(_FakeDescriptor()))
          as _i4.Future<_i2.Descriptor>);
}

/// A class which mocks [DescriptorWithValue].
///
/// See the documentation for Mockito's code generation for more information.
class MockDescriptorWithValue extends _i1.Mock
    implements _i2.DescriptorWithValue {
  MockDescriptorWithValue() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i3.Uint8List get value => (super.noSuchMethod(Invocation.getter(#value),
      returnValue: _FakeUint8List()) as _i3.Uint8List);
  @override
  set value(_i3.Uint8List? _value) =>
      super.noSuchMethod(Invocation.setter(#value, _value),
          returnValueForMissingStub: null);
  @override
  _i2.Characteristic get characteristic =>
      (super.noSuchMethod(Invocation.getter(#characteristic),
          returnValue: _FakeCharacteristic()) as _i2.Characteristic);
  @override
  String get uuid =>
      (super.noSuchMethod(Invocation.getter(#uuid), returnValue: '') as String);
  @override
  int get hashCode =>
      (super.noSuchMethod(Invocation.getter(#hashCode), returnValue: 0) as int);
  @override
  _i4.Future<_i3.Uint8List> read({String? transactionId}) =>
      (super.noSuchMethod(
              Invocation.method(#read, [], {#transactionId: transactionId}),
              returnValue: Future.value(_FakeUint8List()))
          as _i4.Future<_i3.Uint8List>);
  @override
  _i4.Future<void> write(_i3.Uint8List? value, {String? transactionId}) =>
      (super.noSuchMethod(
          Invocation.method(#write, [value], {#transactionId: transactionId}),
          returnValue: Future.value(null),
          returnValueForMissingStub: Future.value()) as _i4.Future<void>);
  @override
  bool operator ==(Object? other) =>
      (super.noSuchMethod(Invocation.method(#==, [other]), returnValue: false)
          as bool);
}
